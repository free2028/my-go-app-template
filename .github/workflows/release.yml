name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 当推送以 v 开头的 tag 时触发，如 v1.0.0

permissions:
  contents: write  # 需要写权限来创建 release

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义要构建的目标平台
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5  # 更新到 v5
        with:
          go-version: '1.21'

      - name: Get dependencies
        run: go mod tidy

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          # 使用 ldflags 在构建时设置版本信息
          go build -ldflags "-X main.version=${{ steps.get_version.outputs.VERSION }} -s -w" \
            -o myapp-${{ matrix.suffix }} .

      - name: Create tarball
        run: |
          tar -czf myapp-${{ matrix.suffix }}.tar.gz myapp-${{ matrix.suffix }}
          # 生成 SHA256 校验和
          sha256sum myapp-${{ matrix.suffix }}.tar.gz > myapp-${{ matrix.suffix }}.tar.gz.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4  # 更新到 v4
        with:
          name: myapp-${{ matrix.suffix }}
          path: |
            myapp-${{ matrix.suffix }}.tar.gz
            myapp-${{ matrix.suffix }}.tar.gz.sha256

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4  # 更新到 v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create Release with Assets
        uses: softprops/action-gh-release@v1  # 使用现代化的 release action
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true  # 自动生成 release notes
          body: |
            ## 🚀 Release ${{ steps.get_version.outputs.VERSION }}

            ### 📦 Downloads

            | Platform | Architecture | Download |
            |----------|--------------|----------|
            | Linux | AMD64 | [myapp-linux-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/myapp-linux-amd64.tar.gz) |
            | Linux | ARM64 | [myapp-linux-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/myapp-linux-arm64.tar.gz) |

            ### 🔐 Checksums
            SHA256 checksums are provided for each binary to verify integrity.

            ### 🛠️ Installation

            1. Download the appropriate binary for your platform
            2. Extract: `tar -xzf myapp-<platform>.tar.gz`
            3. Make executable: `chmod +x myapp-<platform>`
            4. Run: `./myapp-<platform>`

            ### 📋 Usage

            ```bash
            # Set custom port (optional, default: 8080)
            export PORT=3000

            # Run the application
            ./myapp-<platform>
            ```

            The application will be available at:
            - Home: http://localhost:8080/
            - Health Check: http://localhost:8080/health
            - API Info: http://localhost:8080/api/info
          files: |
            artifacts/myapp-linux-amd64/myapp-linux-amd64.tar.gz
            artifacts/myapp-linux-amd64/myapp-linux-amd64.tar.gz.sha256
            artifacts/myapp-linux-arm64/myapp-linux-arm64.tar.gz
            artifacts/myapp-linux-arm64/myapp-linux-arm64.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
